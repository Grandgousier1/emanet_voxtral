#!/usr/bin/env python3
"""
main_enhanced.py - Point d'entr√©e principal am√©lior√© avec CLI conviviale
R√©√©criture compl√®te avec guidage interactif et UX am√©lior√©e
"""

import argparse
import os
import sys
import time
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm
from rich.traceback import install

# Installer le gestionnaire de traceback de rich
install(show_locals=True)

console = Console()

# Importer les am√©liorations de la CLI
try:
    from cli_enhanced import create_enhanced_cli
    from cli_wizard import run_cli_wizard
    CLI_ENHANCED_AVAILABLE = True
except ImportError:
    CLI_ENHANCED_AVAILABLE = False
    console.print("[yellow]CLI am√©lior√©e non disponible, utilisation du mode standard[/yellow]")

# Imports principaux
try:
    from main import run_processing # MODIFI√â: Import direct
    from utils.telemetry import init_telemetry, get_telemetry_manager, shutdown_telemetry
    from cli_feedback import get_feedback
    from error_boundary import with_error_boundary, ErrorSeverity
    from utils.error_messages import ErrorReporter
    from utils.logging_config import setup_logging
    CORE_IMPORTS_AVAILABLE = True
except ImportError as e:
    CORE_IMPORTS_AVAILABLE = False
    console.print(f"[red]Imports principaux √©chou√©s: {e}[/red]")

def parse_arguments() -> argparse.Namespace:
    """Parse les arguments de la ligne de commande avec une aide am√©lior√©e."""
    parser = argparse.ArgumentParser(
        description="üöÄ EMANET VOXTRAL - G√©n√©rateur de Sous-titres B200",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üåü EXEMPLES D'UTILISATION:

  Mode Simple (YouTube):
    python main_enhanced.py --url "https://youtube.com/watch?v=..." --output sous_titres.srt

  Mode Interactif (Recommand√© pour d√©butants):
    python main_enhanced.py --wizard

  Configuration et diagnostic:
    python main_enhanced.py --setup
    python main_enhanced.py --validate
        """
    )
    
    # ... (le reste de la fonction parse_arguments reste identique)
    # Mode selection
    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument("--wizard", action="store_true",
                           help="üßô‚Äç‚ôÇÔ∏è Mode assistant interactif (recommand√©)")
    mode_group.add_argument("--setup", action="store_true",
                           help="‚öôÔ∏è Configuration interactive du syst√®me")
    mode_group.add_argument("--validate", action="store_true",
                           help="üè• Diagnostic et validation du syst√®me")
    mode_group.add_argument("--tutorial", action="store_true",
                           help="üìö Guide d'utilisation complet")
    
    # Input sources
    input_group = parser.add_mutually_exclusive_group()
    input_group.add_argument("--url", type=str,
                            help="üé¨ URL YouTube ou chemin fichier local")
    input_group.add_argument("--batch-list", type=str,
                            help="üì¶ Fichier contenant liste URLs/fichiers")
    
    # Output settings
    parser.add_argument("--output", type=str,
                       help="üíæ Fichier de sortie SRT (mode simple)")
    parser.add_argument("--output-dir", type=str, default="./output",
                       help="üìÅ R√©pertoire de sortie (mode batch)")
    
    # Language and quality
    parser.add_argument("--target-lang", type=str, default="fr",
                       choices=["fr", "en", "es", "de", "it", "pt", "ru", "zh", "ja", "ar"],
                       help="üåç Langue de traduction (d√©faut: fr)")
    parser.add_argument("--quality", type=str, default="balanced",
                       choices=["fast", "balanced", "best"],
                       help="üéØ Niveau de qualit√© (d√©faut: balanced)")
    
    # Model selection
    parser.add_argument("--model", type=str, default="voxtral-small",
                       choices=["voxtral-small", "voxtral-mini"],
                       help="ü§ñ Mod√®le de traduction (d√©faut: voxtral-small)")
    
    # Performance settings
    parser.add_argument("--max-workers", type=int, default=4,
                       help="‚ö° Nombre de workers parall√®les (d√©faut: 4)")
    parser.add_argument("--batch-size", type=int, default=32,
                       help="üì¶ Taille de lot GPU (d√©faut: 32)")
    parser.add_argument("--gpu-memory-limit", type=float, default=0.9,
                       help="üéÆ Limite m√©moire GPU 0.1-0.95 (d√©faut: 0.9)")
    
    # Advanced options
    parser.add_argument("--precision", type=str, default="bf16",
                       choices=["fp16", "bf16", "fp32"],
                       help="üî¢ Pr√©cision GPU (d√©faut: bf16)")
    parser.add_argument("--vad-threshold", type=float, default=0.3,
                       help="üó£Ô∏è Seuil d√©tection voix (d√©faut: 0.3)")
    parser.add_argument("--min-segment-duration", type=float, default=1.0,
                       help="‚è±Ô∏è Dur√©e minimale segment (d√©faut: 1.0s)")
    parser.add_argument("--min-quality-score", type=float, default=0.7,
                       help="üèÜ Score qualit√© minimal (d√©faut: 0.7)")
    
    # Flags
    parser.add_argument("--debug", action="store_true",
                       help="üîç Mode debug d√©taill√©")
    parser.add_argument("--monitor", action="store_true", default=True,
                       help="üìä Interface monitoring temps r√©el")
    parser.add_argument("--telemetry", action="store_true", default=True,
                       help="üìà Collecte m√©triques avanc√©es")
    parser.add_argument("--verbose", action="store_true",
                       help="üì¢ Sortie d√©taill√©e")
    parser.add_argument("--dry-run", action="store_true",
                       help="üß™ Simulation sans traitement r√©el")
    parser.add_argument("--force", action="store_true",
                       help="üí™ Ignorer les v√©rifications de s√©curit√©")
    parser.add_argument("--skip-existing", action="store_true", default=True,
                       help="‚è≠Ô∏è Ignorer fichiers d√©j√† trait√©s")
    parser.add_argument("--continue-on-error", action="store_true", default=True,
                       help="üîÑ Continuer malgr√© les erreurs")
    parser.add_argument("--retry-failed-segments", action="store_true", default=True,
                       help="üîÅ R√©essayer segments √©chou√©s")
    parser.add_argument("--quality-check", action="store_true",
                       help="‚úÖ Validation qualit√© post-traitement")
    
    # Logging
    parser.add_argument("--log-level", type=str, default="INFO",
                       choices=["DEBUG", "INFO", "WARNING", "ERROR"],
                       help="üìù Niveau de logging (d√©faut: INFO)")
    
    return parser.parse_args()

def show_banner():
    """Affiche la banni√®re de l'application."""
    # ... (contenu de la banni√®re identique)
    pass

def show_quick_help():
    """Affiche une aide rapide."""
    # ... (contenu de l'aide identique)
    pass

def handle_special_modes(args: argparse.Namespace) -> bool:
    """G√®re les modes sp√©ciaux (wizard, setup, etc.). Retourne True si g√©r√©."""
    # ... (contenu identique)
    return False

@with_error_boundary("application startup", "main", ErrorSeverity.CRITICAL)
def enhanced_main():
    """Fonction principale am√©lior√©e avec une exp√©rience utilisateur conviviale."""
    
    args = parse_arguments()
    
    if handle_special_modes(args):
        return 0
    
    if not args.url and not args.batch_list:
        console.print("[red]‚ùå Erreur: Aucune source d'entr√©e sp√©cifi√©e.[/red]")
        show_quick_help()
        return 1
    
    show_banner()
    
    # Initialiser les syst√®mes principaux
    if CORE_IMPORTS_AVAILABLE:
        setup_logging(log_level=args.log_level.upper())
        if args.telemetry:
            init_telemetry("emanet_voxtral")
        feedback = get_feedback(debug_mode=args.debug)
    else:
        console.print("[yellow]Syst√®mes principaux non disponibles, mode basique.[/yellow]")
        feedback = None

    # ... (le reste de la logique de enhanced_main reste similaire)
    # show_processing_summary(args)
    # ...

    # MODIFI√â: Appel direct √† la logique de traitement
    try:
        console.print("\n[cyan]üöÄ D√©marrage du pipeline de traitement...[/cyan]")
        # Appel direct de la logique import√©e de main.py
        result = run_processing(args, feedback)
        
        if args.telemetry and CORE_IMPORTS_AVAILABLE:
            shutdown_telemetry()
        
        return result
        
    except Exception as e:
        console.print(f"\n[red]‚ùå Erreur lors du traitement: {e}[/red]")
        if args.debug:
            console.print_exception()
        return 1

# ... (le reste du fichier, y compris show_processing_summary, simulate_processing, etc. reste identique)

if __name__ == "__main__":
    try:
        sys.exit(enhanced_main())
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è Interruption par l'utilisateur[/yellow]")
        sys.exit(130)
    except Exception as e:
        console.print(f"\n[red]üí• Erreur fatale: {e}[/red]")
        console.print("[dim]Utilisez --debug pour plus de d√©tails[/dim]")
        sys.exit(1)
