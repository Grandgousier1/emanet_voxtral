# pyproject.toml - Configuration projet et standards code

# Sphinx documentation configuration
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode", 
    "sphinx.ext.napoleon",
    "myst_parser"
]

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

# Configuration setuptools pour éviter la confusion des packages
[tool.setuptools]
py-modules = ["main", "quick_start", "validator", "benchmark", "monitor"]

[tool.setuptools.packages.find]
include = ["utils*", "services*", "config*"]
exclude = ["tests*"]

[project]
name = "voxtral-b200"
version = "1.0.0"
description = "Système de traduction audio optimisé pour NVIDIA B200"
authors = [
    {name = "Voxtral Team", email = "voxtral@example.com"}
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
keywords = ["audio", "translation", "b200", "pytorch", "ml"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech"
]

dependencies = [
    # Core ML - torch/torchaudio are pre-installed on RunPod
    "transformers==4.54.0",
    "huggingface-hub>=0.23.0",
    "mistral-common==1.8.1",
    "numpy>=1.24.0",
    "packaging>=23.0",
    "pyyaml>=6.0",
    "psutil>=5.9.0",
    "pydantic>=2.0.0",

    # Audio
    "soundfile==0.12.1",
    "librosa==0.10.2",
    "silero-vad>=5.0.0",
    "resampy==0.4.2",
    "audioread==3.0.1",
    "faster-whisper>=1.0.0", # Fallback ASR

    # Video/Audio Download
    "yt-dlp==2025.6.30",
    "ffmpeg-python==0.2.0",

    # UI & CLI
    "rich==13.7.1",
    "click>=8.0.0",
    "tqdm==4.67.1",

    # Security & Auth
    "cryptography>=44.0.1", # Made mandatory
    "keyring==24.2.0",
    "python-dotenv==1.1.1",

    # Utilities
    "requests==2.32.4",
    "fake-useragent==1.4.0",
    "sqlalchemy==2.0.31",
    "nvidia-ml-py>=12.0", # Official NVIDIA package
    "sentencepiece==0.2.0",
]

[project.optional-dependencies]
# Dépendances optionnelles pour fonctionnalités avancées
vllm = ["vllm>=0.6.0,<0.8.0"]
nlp = [
    "nltk>=3.8.2",
    "sacrebleu==2.4.2",
    "sacremoses==0.1.1",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-sugar>=0.9.7",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
]
benchmark = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "pandas>=1.5.0",
]

[project.scripts]
voxtral = "main:main"
voxtral-benchmark = "benchmark:main"
voxtral-validate = "validator:main"

[project.urls]
Homepage = "https://github.com/voxtral/voxtral-b200"
Documentation = "https://voxtral-b200.readthedocs.io"
Repository = "https://github.com/voxtral/voxtral-b200.git"
"Bug Tracker" = "https://github.com/voxtral/voxtral-b200/issues"

# Configuration outils de développement

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Répertoires à exclure
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["utils", "voxtral_prompts", "cli_feedback", "config"]
known_third_party = ["torch", "transformers", "numpy", "rich", "click"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Progressivement activer
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Modules sans types stricts (pour migration progressive)
[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "soundfile.*",
    "vllm.*",
    "transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "slow: tests qui prennent du temps",
    "gpu: tests nécessitant GPU",
    "b200: tests spécifiques B200",
    "integration: tests d'intégration",
    "unit: tests unitaires",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".tox",
    "*.egg",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # Use of assert detected
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # assert_used, shell_injection (tests)

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests.py"]

# Pre-commit configuration is in .pre-commit-config.yaml file