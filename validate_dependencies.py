
"""
Script de validation des d√©pendances √† haut risque.

Ce script tente d'installer et d'importer s√©quentiellement les biblioth√®ques
qui sont les plus susceptibles de causer des probl√®mes de compatibilit√©
sur des architectures GPU sp√©cifiques comme le B200.

Usage: python validate_dependencies.py
"""
import subprocess
import sys
import importlib

# D√©pendances √† tester. Le format est: (extra_pip, nom_module_import)
# L'extra_pip correspond √† celui d√©fini dans pyproject.toml ([project.optional-dependencies])
DEPS_TO_VALIDATE = [
    ("vllm", "vllm"),
    ("flash-attn", "flash_attn"),
    ("bitsandbytes", "bitsandbytes"),
]

def run_command(command):
    """Ex√©cute une commande shell et retourne True en cas de succ√®s."""
    print(f"\n--- Ex√©cution: '{' '.join(command)}' ---")
    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, encoding='utf-8')
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output.strip())
        
        return_code = process.poll()
        if return_code == 0:
            print(f"--- Commande r√©ussie ---")
            return True
        else:
            print(f"--- ERREUR: La commande a √©chou√© avec le code {return_code} ---", file=sys.stderr)
            return False
    except Exception as e:
        print(f"--- EXCEPTION: Une erreur est survenue lors de l'ex√©cution. {e} ---", file=sys.stderr)
        return False

def validate_import(module_name):
    """Tente d'importer un module et retourne True en cas de succ√®s."""
    print(f"--- Validation de l'import: '{module_name}' ---")
    try:
        importlib.import_module(module_name)
        print(f"--- Succ√®s: Le module '{module_name}' a √©t√© import√© correctement. ---")
        return True
    except ImportError as e:
        print(f"--- ERREUR: Impossible d'importer le module '{module_name}'. Erreur: {e} ---", file=sys.stderr)
        return False
    except Exception as e:
        print(f"--- EXCEPTION: Une erreur inattendue est survenue lors de l'import. {e} ---", file=sys.stderr)
        return False

def main():
    print("üöÄ D√©marrage de la validation des d√©pendances critiques...")
    all_success = True
    
    for extra, module in DEPS_TO_VALIDATE:
        print(f"\n{'='*60}\nValidating: {extra} (module: {module})\n{'='*60}")
        
        # √âtape 1: Installation
        install_command = [sys.executable, "-m", "pip", "install", f".[{extra}]"]
        if not run_command(install_command):
            print(f"‚ùå √âchec de l'installation pour '{extra}'. Validation arr√™t√©e pour ce paquet.", file=sys.stderr)
            all_success = False
            continue
            
        # √âtape 2: Importation
        if not validate_import(module):
            print(f"‚ùå √âchec de l'importation pour '{module}'.", file=sys.stderr)
            all_success = False

    print(f"\n{'='*60}\nR√©sultat final de la validation\n{'='*60}")
    if all_success:
        print("‚úÖ‚úÖ‚úÖ Toutes les d√©pendances critiques ont √©t√© install√©es et import√©es avec succ√®s!")
        sys.exit(0)
    else:
        print("üî•üî•üî• Au moins une d√©pendance critique a √©chou√©. Veuillez v√©rifier les logs ci-dessus.")
        sys.exit(1)

if __name__ == "__main__":
    main()

